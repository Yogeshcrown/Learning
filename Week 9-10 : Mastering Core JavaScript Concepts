Topic to Cover
================
1. Promises and Async/Await:
   - Understand how to create and handle promises (`then`, `catch`, `finally`).
   - Learn how to use `async` and `await` for cleaner asynchronous code.

2. Classes and Inheritance:
   - Learn about ES6 classes and how to define constructors, methods, and properties.
   - Understand prototypal inheritance and how to extend classes.

3. Modules:
   - Learn how to split your code into modules using `export` and `import`.

4. Error Handling Best Practices:
   - Explore throwing custom errors and handling specific error scenarios.



1. JavaScript Code: Promises and Async/Await
==========================================

// Creating a Promise (Simulating an API Call)
function fetchData(success = true) {
    return new Promise((resolve, reject) => {
        console.log("‚è≥ Fetching data...");
        setTimeout(() => {
            if (success) {
                resolve(" Data successfully retrieved!");
            } else {
                reject(" Error: Failed to fetch data.");
            }
        }, 2000);
    });
}

// Handling Promises using `.then()`, `.catch()`, `.finally()`
fetchData(true)
    .then((data) => {
        console.log(" Promise resolved:", data);
    })
    .catch((error) => {
        console.error(" Promise rejected:", error);
    })
    .finally(() => {
        console.log(" Promise execution completed.");
    });

// Using Async/Await to handle Promises
async function fetchDataAsync() {
    console.log(" Fetching data using async/await...");
    try {
        let result = await fetchData(true);
        console.log(" Async/Await Result:", result);
    } catch (error) {
        console.error(" Async/Await Error:", error);
    } finally {
        console.log(" Async/Await execution completed.");
    }
}

fetchDataAsync();

// Handling Rejected Promises
fetchData(false)
    .then((data) => console.log(" This won't be executed:", data))
    .catch((error) => console.error(" Handling error in .catch():", error))
    .finally(() => console.log(" Error handling completed."));


JavaScript Code: Using async and await for Clean Async Operations
===================================================================

// Simulating an API Call with a Promise
function fetchData() {
    return new Promise((resolve, reject) => {
        console.log("‚è≥ Fetching data...");
        setTimeout(() => {
            const success = Math.random() > 0.3; // 70% success rate
            if (success) {
                resolve(" Data successfully retrieved!");
            } else {
                reject(" Error: Failed to fetch data.");
            }
        }, 2000);
    });
}

// Using async/await to handle asynchronous operations
async function getData() {
    console.log(" Starting async function...");
    
    try {
        let result = await fetchData();  // Wait until the promise resolves
        console.log(" Data Received:", result);
    } catch (error) {
        console.error(" Error caught in async/await:", error);
    } finally {
        console.log(" Async/Await Execution Completed.");
    }
}

// Calling the async function
getData();

// Async function with multiple awaits
async function multipleFetch() {
    console.log(" Fetching multiple data sets...");
    try {
        let data1 = await fetchData();
        console.log(" First fetch:", data1);

        let data2 = await fetchData();
        console.log(" Second fetch:", data2);
        
        console.log(" All data fetched successfully!");
    } catch (error) {
        console.error(" Error during multiple fetch:", error);
    }
}

// Call the function with multiple awaits
multipleFetch();


2. Classes and Inheritance:- Learn about ES6 classes and how to define constructors, methods, and properties.
===============================================================================================================

// Base Class (Parent)
class Animal {
    constructor(name, sound) {
        this.name = name;
        this.sound = sound;
    }

    // Method to make the animal speak
    makeSound() {
        console.log(`${this.name} says: ${this.sound}`);
    }
}

// Subclass (Child) - Extending Animal Class
class Dog extends Animal {
    constructor(name, breed) {
        super(name, "Woof!");  // Call parent constructor
        this.breed = breed;    // Additional property for Dog
    }

    // Method specific to Dog
    fetch() {
        console.log(`${this.name} is fetching the ball! üèÄ`);
    }
}

// Another Subclass - Cat
class Cat extends Animal {
    constructor(name, color) {
        super(name, "Meow!");  // Call parent constructor
        this.color = color;
    }

    // Method specific to Cat
    scratch() {
        console.log(`${this.name} is scratching the furniture! üòº`);
    }
}

// Creating Instances
const dog1 = new Dog("Buddy", "Golden Retriever");
const cat1 = new Cat("Whiskers", "Black");

// Using Methods
dog1.makeSound();  // Output: Buddy says: Woof!
dog1.fetch();      // Output: Buddy is fetching the ball!

cat1.makeSound();  // Output: Whiskers says: Meow!
cat1.scratch();    // Output: Whiskers is scratching the furniture!


2. Classes and Inheritance: - Understand prototypal inheritance and how to extend classes.
==========================================================================================

// Parent Constructor Function (Base Class)
function Person(name, age) {
    this.name = name;
    this.age = age;
}

// Adding a method to the prototype of Person
Person.prototype.greet = function () {
    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);
};

// Child Constructor Function (Extending Person)
function Employee(name, age, jobTitle) {
    Person.call(this, name, age); // Inherit properties from Person
    this.jobTitle = jobTitle;
}

// Inheriting from Person's prototype
Employee.prototype = Object.create(Person.prototype);
Employee.prototype.constructor = Employee;

// Adding a new method specific to Employee
Employee.prototype.work = function () {
    console.log(`${this.name} is working as a ${this.jobTitle}.`);
};

// Creating Instances
const person1 = new Person("Alice", 30);
const employee1 = new Employee("Bob", 25, "Software Engineer");

// Using Methods
person1.greet();  // Output: Hello, my name is Alice and I am 30 years old.
employee1.greet();  // Output: Hello, my name is Bob and I am 25 years old.
employee1.work();  // Output: Bob is working as a Software Engineer.


3. Modules:- Learn how to split your code into modules using export and import.
================================================================================

Step 1: Create separate module files.

// mathUtils.js (This is the module)

// Named Exports
export function add(a, b) {
    return a + b;
}

export function subtract(a, b) {
    return a - b;
}

// Default Export
export default function multiply(a, b) {
    return a * b;
}

// Exporting a Constant
export const PI = 3.14159;


Step 2: Use export to expose functions, classes, or variables.

// main.js (This is the main script)

// Importing Named Exports
import { add, subtract, PI } from "./mathUtils.js";

// Importing Default Export
import multiply from "./mathUtils.js";

// Using Imported Functions
console.log("Addition:", add(5, 3));       // Output: Addition: 8
console.log("Subtraction:", subtract(10, 4));  // Output: Subtraction: 6
console.log("Multiplication:", multiply(6, 2)); // Output: Multiplication: 12
console.log("Value of PI:", PI);  // Output: Value of PI: 3.14159


Step 3: Use import to use them in another file.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JavaScript Modules</title>
</head>
<body>
    <h1>Check the console for output</h1>
    <script type="module" src="main.js"></script>
</body>
</html>


4. Error Handling Best Practices:- Explore throwing custom errors and handling specific error scenarios.
=========================================================================================================

// Custom Error Class
class CustomError extends Error {
    constructor(message, errorCode) {
        super(message);  // Call parent class constructor
        this.name = "CustomError";
        this.errorCode = errorCode;
    }
}

// Function with Try-Catch for Handling Errors
function divideNumbers(a, b) {
    try {
        if (typeof a !== "number" || typeof b !== "number") {
            throw new CustomError("Both inputs must be numbers.", 400);
        }

        if (b === 0) {
            throw new CustomError("Division by zero is not allowed!", 403);
        }

        return a / b;  // Successful execution
    } catch (error) {
        if (error instanceof CustomError) {
            console.error(` Custom Error (${error.errorCode}): ${error.message}`);
        } else {
            console.error(" Unexpected Error:", error.message);
        }
    } finally {
        console.log(" Execution completed (whether error occurred or not).");
    }
}

// Function with Specific Error Handling
function parseJSON(jsonString) {
    try {
        return JSON.parse(jsonString); // Attempt to parse JSON
    } catch (error) {
        console.error(" JSON Parsing Error:", error.message);
        return null; // Return null on failure
    }
}

// Function with Try-Catch for Promises
async function fetchData() {
    try {
        let response = await fetch("https://jsonplaceholder.typicode.com/posts/1");
        
        if (!response.ok) {
            throw new CustomError(`HTTP Error: ${response.status}`, response.status);
        }

        let data = await response.json();
        console.log(" Fetched Data:", data);
    } catch (error) {
        console.error(" Fetch Error:", error.message);
    }
}

// Test Cases
console.log(divideNumbers(10, 2));  // Output: 5
console.log(divideNumbers(10, "a")); // Custom Error: Both inputs must be numbers.
console.log(divideNumbers(10, 0));  // Custom Error: Division by zero is not allowed!

parseJSON('{"name": "John"}'); // Correct JSON
parseJSON('{"name": John}');   // Incorrect JSON, triggers catch block

fetchData();  // Async error handling in fetch API
