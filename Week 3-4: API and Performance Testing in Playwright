API Testing: Learn to make API requests (`request.get`, `request.post`) and validate responses.  
Mocking Requests: Use Playwright to intercept and mock network requests for testing edge cases.  
Performance Timing: Track page performance metrics like load time using Playwright’s `page.metrics()` method.  


#"API Testing: Learn to make API requests (`request.get`, `request.post`) and validate responses."

1. test('Verify GET response status is 200 for staging.inventive.ai', async ({ request }) => {
    const response = await request.get('https://staging.inventive.ai');
    
    // Assert the response status
    expect(response.status()).toBe(200);
    
    // Optional: Print response body if needed
    console.log(await response.text());
  });

2. test.only('Learn to make API requests (`request.get`, `request.post`) and validate responses, @learning', async ({ request }) => {
    const loginPayload = {
        "userEmail": "anshika@gmail.com",
        "userPassword": "Iamking@000"
      };

    const getResponse = await request.get("https://rahulshettyacademy.com/client/");

    const loginResponse = await request.post("https://rahulshettyacademy.com/api/ecom/auth/login", {
        data: loginPayload
    });

    // Check if the response is successful
    expect(getResponse.status()).toBe(200);
    expect(loginResponse.status()).toBe(200);
    expect(loginResponse.ok()).toBeTruthy();

    // Optionally, you can log the response
    const responseBody = await loginResponse.json();
    console.log(responseBody);
});

#Mocking Requests: Use Playwright to intercept and mock network requests for testing edge cases.

Test 1 - Intercept the API requests
const { test, expect, request } = require('@playwright/test');
const { APiUtils } = require('../utils/APiUtils');
const loginPayLoad = { userEmail: "anshika@gmail.com", userPassword: "Iamking@000" };
const orderPayLoad = { orders: [{ country: "India", productOrderedId: "6262e95ae26b7e1a10e89bf0" }] };
const fakePayLoadOrders = { data: [], message: "No Orders" };
 
let response;
test.beforeAll(async () => {
  const apiContext = await request.newContext();
  const apiUtils = new APiUtils(apiContext, loginPayLoad);
  response = await apiUtils.createOrder(orderPayLoad);
 
})
 
 
//create order is success
test('@SP Place the order', async ({ page }) => {
  page.addInitScript(value => {
 
    window.localStorage.setItem('token', value);
  }, response.token);
  await page.goto("https://rahulshettyacademy.com/client");
 
 
  await page.route("https://rahulshettyacademy.com/api/ecom/order/get-orders-for-customer/*",
    async route => {
      const response = await page.request.fetch(route.request());
      let body = JSON.stringify(fakePayLoadOrders);
      route.fulfill(
        {
          response,
          body,
 
        });
      //intercepting response -APi response-> { playwright fakeresponse}->browser->render data on front end
    });
 
  await page.locator("button[routerlink*='myorders']").click();
  await page.waitForResponse("https://rahulshettyacademy.com/api/ecom/order/get-orders-for-customer/*")
 
  console.log(await page.locator(".mt-4").textContent());
});
 
Test 2 
======
const { test,expect } = require('@playwright/test');
 
 
test('@QW Security test request intercept', async ({ page }) => {
 
    //login and reach orders page
    await page.goto("https://rahulshettyacademy.com/client");
    await page.locator("#userEmail").fill("anshika@gmail.com");
    await page.locator("#userPassword").type("Iamking@000");
    await page.locator("[value='Login']").click();
    await page.waitForLoadState('networkidle');
    await page.locator(".card-body b").first().waitFor();
 
    await page.locator("button[routerlink*='myorders']").click();
    await page.route("https://rahulshettyacademy.com/api/ecom/order/get-orders-details?id=*",
        route => route.continue({ url: 'https://rahulshettyacademy.com/api/ecom/order/get-orders-details?id=621661f884b053f6765465b6' }))
    await page.locator("button:has-text('View')").first().click();
    await expect(page.locator("p").last()).toHaveText("You are not authorize to view this order"); 
})


Performance Timing: Track page performance metrics like load time using Playwright’s `page.metrics()` method.  

test.only('Performance Timing: Track page performance metrics', async ({ page }) => {
    // Start measuring time before navigation
    const startTime = Date.now();

    // Navigate to the page
    await page.goto('https://www.4amworld.com/');

    // Wait for the page to fully load
    await page.waitForLoadState('load');

    // Capture performance metrics using JavaScript's performance API
    const metrics = await page.evaluate(() => {
        return JSON.stringify(performance.timing);
    });

    // Parse metrics
    const perfTiming = JSON.parse(metrics);

    // Calculate important performance values
    const loadTime = perfTiming.loadEventEnd - perfTiming.navigationStart;
    const domContentLoadedTime = perfTiming.domContentLoadedEventEnd - perfTiming.navigationStart;
    const connectTime = perfTiming.connectEnd - perfTiming.connectStart;
    const requestTime = perfTiming.responseEnd - perfTiming.requestStart;

    // Log metrics
    console.log('Page Load Time:', loadTime, 'ms');
    console.log('DOM Content Loaded Time:', domContentLoadedTime, 'ms');
    console.log('Connection Time:', connectTime, 'ms');
    console.log('Request Time:', requestTime, 'ms');
});



