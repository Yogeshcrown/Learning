1. Functions:
   - Learn to declare and call functions.
   - Understand the difference between function declarations and expressions.
   - Explore arrow functions (`=>`) and the concept of parameters and return values.

2. DOM Manipulation:
   - Learn how to select elements using `getElementById`, `querySelector`, and `querySelectorAll`.
   - Understand how to add, remove, and modify HTML elements and attributes.
   - Learn how to handle events (e.g., `click`, `mouseover`, `submit`) with `addEventListener`.

****************************************************************************************************************************

1.1 Functions - Learn to declare and call functions.
=====================================================

1.1.1 Basic Function Declaration & Calling - javascript
// Function Declaration
function greet(name) {
    console.log(`Hello, ${name}!`);
}

// Function Call
greet("Yogesh"); // Output: Hello, Yogesh!

---

 1.1.2 Function with Return Value - javascript

function add(a, b) {
    return a + b;
}

// Calling function and storing the result

let sum = add(5, 3);
console.log("Sum:", sum); // Output: Sum: 8


---

 1.1.3 Anonymous Function (Function Expression) - javascript

const multiply = function (x, y) {
    return x  y;
};

// Calling the function
console.log(multiply(4, 6)); // Output: 24

---

1.1.4 Arrow Function (Modern JavaScript) - javascript

const subtract = (a, b) => a - b;

// Calling the function
console.log(subtract(10, 3)); // Output: 7
```

---

1.1.5 Function with Default Parameters - javascript

function greetUser(name = "Guest") {
    console.log(`Welcome, ${name}!`);
}

// Calling with and without arguments
greetUser("Yogesh"); // Output: Welcome, Yogesh!
greetUser();         // Output: Welcome, Guest!
```

---

1.1.6 Immediately Invoked Function Expression (IIFE) - javascript

(function () {
    console.log("This function runs immediately!");
})(); // Output: This function runs immediately!
```

---

1.1.7 Function with Rest Parameters (`...args`) - javascript

function sumAll(...numbers) {
    return numbers.reduce((total, num) => total + num, 0);
}

// Calling with multiple arguments
console.log(sumAll(1, 2, 3, 4, 5)); // Output: 15

********************************************************************************************************************

1.2. Functions - Understand the difference between function declarations and expressions.
========================================================================================

// Function Declaration
function greet() {
    console.log("Hello from a function declaration!");
}

// Calling the function declaration (can be called before or after its definition)
greet(); 

// Function Expression (Anonymous)
const greetExpression = function() {
    console.log("Hello from a function expression!");
};

// Calling the function expression (must be called after its definition)
greetExpression(); 

// Function Expression (Named)
const namedGreetExpression = function sayHello() {
    console.log("Hello from a named function expression!");
};

// Calling the named function expression
namedGreetExpression();

// Trying to call sayHello() directly would result in an error because it’s scoped within the expression
// sayHello(); // ❌ Uncaught ReferenceError: sayHello is not defined


1. Functions:- Explore arrow functions (=>) and the concept of parameters and return values.
=============================================================================================

// Basic arrow function with no parameters
const greet = () => "Hello, World!";
console.log(greet()); // Output: Hello, World!

// Arrow function with one parameter
const square = num => num * num;
console.log(square(5)); // Output: 25

// Arrow function with multiple parameters
const add = (a, b) => a + b;
console.log(add(3, 7)); // Output: 10

// Arrow function with a block body (explicit return)
const multiply = (a, b) => {
    return a * b;
};
console.log(multiply(4, 6)); // Output: 24

// Arrow function returning an object
const createUser = (name, age) => ({ name, age });
console.log(createUser("Alice", 25)); // Output: { name: 'Alice', age: 25 }

// Using arrow function inside array methods
const numbers = [1, 2, 3, 4, 5];
const doubled = numbers.map(num => num * 2);
console.log(doubled); // Output: [2, 4, 6, 8, 10]

// Arrow function with default parameters
const greetUser = (name = "Guest") => `Hello, ${name}!`;
console.log(greetUser()); // Output: Hello, Guest!
console.log(greetUser("Yogesh")); // Output: Hello, Yogesh!


2. DOM Manipulation:- Learn how to select elements using getElementById, querySelector, and querySelectorAll.
==============================================================================================================

// Basic arrow function with no parameters
const greet = () => "Hello, World!";
console.log(greet()); // Output: Hello, World!

// Arrow function with one parameter
const square = num => num * num;
console.log(square(5)); // Output: 25

// Arrow function with multiple parameters
const add = (a, b) => a + b;
console.log(add(3, 7)); // Output: 10

// Arrow function with a block body (explicit return)
const multiply = (a, b) => {
    return a * b;
};
console.log(multiply(4, 6)); // Output: 24

// Arrow function returning an object
const createUser = (name, age) => ({ name, age });
console.log(createUser("Alice", 25)); // Output: { name: 'Alice', age: 25 }

// Using arrow function inside array methods
const numbers = [1, 2, 3, 4, 5];
const doubled = numbers.map(num => num * 2);
console.log(doubled); // Output: [2, 4, 6, 8, 10]

// Arrow function with default parameters
const greetUser = (name = "Guest") => `Hello, ${name}!`;
console.log(greetUser()); // Output: Hello, Guest!
console.log(greetUser("Yogesh")); // Output: Hello, Yogesh!

// DOM Manipulation: Selecting elements
// Selecting an element by ID
const heading = document.getElementById("title");
console.log(heading.textContent);

// Selecting an element using querySelector
const firstParagraph = document.querySelector("p");
console.log(firstParagraph.textContent);

// Selecting multiple elements using querySelectorAll
const allParagraphs = document.querySelectorAll("p");
allParagraphs.forEach(paragraph => console.log(paragraph.textContent));

// Changing the text content of an element
document.getElementById("title").textContent = "New Title";

// Modifying the style of an element
document.querySelector("p").style.color = "blue";


2. DOM Manipulation:- Understand how to add, remove, and modify HTML elements and attributes.
=============================================================================================

// Basic arrow function with no parameters
const greet = () => "Hello, World!";
console.log(greet()); // Output: Hello, World!

// Arrow function with one parameter
const square = num => num * num;
console.log(square(5)); // Output: 25

// Arrow function with multiple parameters
const add = (a, b) => a + b;
console.log(add(3, 7)); // Output: 10

// Arrow function with a block body (explicit return)
const multiply = (a, b) => {
    return a * b;
};
console.log(multiply(4, 6)); // Output: 24

// Arrow function returning an object
const createUser = (name, age) => ({ name, age });
console.log(createUser("Alice", 25)); // Output: { name: 'Alice', age: 25 }

// Using arrow function inside array methods
const numbers = [1, 2, 3, 4, 5];
const doubled = numbers.map(num => num * 2);
console.log(doubled); // Output: [2, 4, 6, 8, 10]

// Arrow function with default parameters
const greetUser = (name = "Guest") => `Hello, ${name}!`;
console.log(greetUser()); // Output: Hello, Guest!
console.log(greetUser("Yogesh")); // Output: Hello, Yogesh!

// DOM Manipulation: Selecting elements
// Selecting an element by ID
const heading = document.getElementById("title");
console.log(heading.textContent);

// Selecting an element using querySelector
const firstParagraph = document.querySelector("p");
console.log(firstParagraph.textContent);

// Selecting multiple elements using querySelectorAll
const allParagraphs = document.querySelectorAll("p");
allParagraphs.forEach(paragraph => console.log(paragraph.textContent));

// Changing the text content of an element
document.getElementById("title").textContent = "New Title";

// Modifying the style of an element
document.querySelector("p").style.color = "blue";

// DOM Manipulation: Adding, Removing, and Modifying Elements
// Creating a new element
const newDiv = document.createElement("div");
newDiv.textContent = "This is a new div";
newDiv.style.backgroundColor = "lightgray";
document.body.appendChild(newDiv);

// Removing an element
const removeElement = document.getElementById("title");
if (removeElement) {
    removeElement.remove();
}

// Modifying attributes
const link = document.createElement("a");
link.href = "https://www.example.com";
link.textContent = "Visit Example";
document.body.appendChild(link);

// Changing an existing attribute
document.querySelector("a").setAttribute("target", "_blank");


2. DOM Manipulation:- Learn how to handle events (e.g., click, mouseover, submit) with addEventListener.
==========================================================================================================

// Basic arrow function with no parameters
const greet = () => "Hello, World!";
console.log(greet()); // Output: Hello, World!

// Arrow function with one parameter
const square = num => num * num;
console.log(square(5)); // Output: 25

// Arrow function with multiple parameters
const add = (a, b) => a + b;
console.log(add(3, 7)); // Output: 10

// Arrow function with a block body (explicit return)
const multiply = (a, b) => {
    return a * b;
};
console.log(multiply(4, 6)); // Output: 24

// Arrow function returning an object
const createUser = (name, age) => ({ name, age });
console.log(createUser("Alice", 25)); // Output: { name: 'Alice', age: 25 }

// Using arrow function inside array methods
const numbers = [1, 2, 3, 4, 5];
const doubled = numbers.map(num => num * 2);
console.log(doubled); // Output: [2, 4, 6, 8, 10]

// Arrow function with default parameters
const greetUser = (name = "Guest") => `Hello, ${name}!`;
console.log(greetUser()); // Output: Hello, Guest!
console.log(greetUser("Yogesh")); // Output: Hello, Yogesh!

// DOM Manipulation: Selecting elements
// Selecting an element by ID
const heading = document.getElementById("title");
console.log(heading.textContent);

// Selecting an element using querySelector
const firstParagraph = document.querySelector("p");
console.log(firstParagraph.textContent);

// Selecting multiple elements using querySelectorAll
const allParagraphs = document.querySelectorAll("p");
allParagraphs.forEach(paragraph => console.log(paragraph.textContent));

// Changing the text content of an element
document.getElementById("title").textContent = "New Title";

// Modifying the style of an element
document.querySelector("p").style.color = "blue";

// DOM Manipulation: Adding, Removing, and Modifying Elements
// Creating a new element
const newDiv = document.createElement("div");
newDiv.textContent = "This is a new div";
newDiv.style.backgroundColor = "lightgray";
document.body.appendChild(newDiv);

// Removing an element
const removeElement = document.getElementById("title");
if (removeElement) {
    removeElement.remove();
}

// Modifying attributes
const link = document.createElement("a");
link.href = "https://www.example.com";
link.textContent = "Visit Example";
document.body.appendChild(link);

// Changing an existing attribute
document.querySelector("a").setAttribute("target", "_blank");

// DOM Manipulation: Handling Events
// Handling a click event
document.querySelector("button").addEventListener("click", () => {
    alert("Button clicked!");
});

// Handling a mouseover event
document.querySelector("p").addEventListener("mouseover", () => {
    console.log("Mouse is over the paragraph!");
});

// Handling a form submit event
document.querySelector("form").addEventListener("submit", (event) => {
    event.preventDefault(); // Prevent form submission
    console.log("Form submitted!");
});
